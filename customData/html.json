{
  "$schema": "https://raw.githubusercontent.com/microsoft/vscode-html-languageservice/master/docs/customData.schema.json",
  "version": 1.1,
  "globalAttributes": [
    {
      "name": "x-data",
      "description": {
        "kind": "markdown",
        "value": "`x-data` declares a new component scope. It tells the framework to initialize a new component with the following data object.\n\nThink of it like the `data` property of a Vue component.\n\n**Example:** `<div x-data='{ foo: 'bar' }'>...</div>`\n\n**Structure:** `<div x-data='[JSON data object]'>...</div>`"
      }
    },
    {
      "name": "x-init",
      "description": {
        "kind": "markdown",
        "value": "`x-init` runs an expression when a component is initialized.\n\nIf you wish to run code AFTER Alpine has made its initial updates to the DOM (something like a `mounted()` hook in VueJS), you can return a callback from `x-init`, and it will be run after:\n\n`x-init='return () => { // we have access to the post-dom-initialization state here // }'`"
      }
    },
    {
      "name": "x-show",
      "description": {
        "kind": "markdown",
        "value": "`x-show` toggles the `display: none;` style on the element depending if the expression resolves to `true` or `false`.\n\n**Example:** `<div x-show='open'></div>`\n\n**Structure:** `<div x-show='[expression]'></div>`"
      }
    },
    {
      "name": "x-bind:",
      "description": {
        "kind": "markdown",
        "value": "`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "@",
      "description": {
        "kind": "markdown",
        "value": "`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "x-model",
      "description": {
        "kind": "markdown",
        "value": "`x-model` adds 'two-way data binding' to an element. In other words, the value of the input element will be kept in sync with the value of the data item of the component.\n\n> Note: `x-model` is smart enough to detect changes on text inputs, checkboxes, radio buttons, textareas, selects, and multiple selects. It should behave [how Vue would](https://vuejs.org/v2/guide/forms.html) in those scenarios.\n\n**Example:** `<input type='text' x-model='foo'>`\n\n**Structure:** `<input type='text' x-model='[data item]'>`"
      }
    },
    {
      "name": "x-text",
      "description": {
        "kind": "markdown",
        "value": "`x-text` works similarly to `x-bind`, except instead of updating the value of an attribute, it will update the `innerText` of an element.\n\n**Example:** `<span x-text='foo'></span>`\n\n**Structure:** `<span x-text='[expression]'`"
      }
    },
    {
      "name": "x-html",
      "description": {
        "kind": "markdown",
        "value": "`x-html` works similarly to `x-bind`, except instead of updating the value of an attribute, it will update the `innerHTML` of an element.\n\n**Example:** `<span x-html='foo'></span>`\n\n**Structure:** `<span x-html='[expression]'`"
      }
    },
    {
      "name": "x-ref",
      "description": {
        "kind": "markdown",
        "value": "`x-ref` provides a convenient way to retrieve raw DOM elements out of your component. By setting an `x-ref` attribute on an element, you are making it available to all event handlers inside an object called `$refs`.\n\nThis is a helpful alternative to setting ids and using `document.querySelector` all over the place.\n\n**Example:** `<div x-ref='foo'></div><button @click='$refs.foo.innerText = 'bar''></button>`\n\n**Structure:** `<div x-ref='[ref name]'></div><button @click='$refs.[ref name].innerText = 'bar''></button>`"
      }
    },
    {
      "name": "x-if",
      "description": {
        "kind": "markdown",
        "value": "For cases where `x-show` isn't sufficient (`x-show` sets an element to `display: none` if it's false), `x-if` can be used to  actually remove an element completely from the DOM.\n\nIt's important that `x-if` is used on a `<template></template>` tag because Alpine doesn't use a virtual DOM. This implementation allows Alpine to stay rugged and use the real DOM to work its magic.\n\n> Note: `x-if` must have a single element root inside the `<template></template>` tag.\n\n**Example:** `<template x-if='true'><div>Some Element</div></template>`\n\n**Structure:** `<template x-if='[expression]'><div>Some Element</div></template>`"
      }
    },
    {
      "name": "x-for",
      "description": {
        "kind": "markdown",
        "value": "`x-for` is available for cases when you want to create new DOM nodes for each item in an array. This should appear similar to `v-for` in Vue, with one exception of needing to exist on a `template` tag, and not a regular DOM element.\n\n> Note: the `:key` binding is optional, but HIGHLY recommended.\n\n**Example:**\n```html\n<template x-for='item in items' :key='item'>\n    <div x-text='item'></div>\n</template>\n```"
      }
    },
    {
      "name": ":key",
      "description": {
        "kind": "markdown",
        "value": "Optional, but HIGHLY recommended binding for `x-for` directive."
      }
    },
    {
      "name": "x-transition:enter",
      "description": {
        "kind": "markdown",
        "value": "Alpine offers 6 different transition directives for applying classes to various stages of an element's transition between 'hidden' and 'shown' states. These directives work both with `x-show` AND `x-if`.\n\nThese behave exactly like VueJs's transition directives, except they have different, more sensible names:\n\n| Directive | Description |\n| --- | --- |\n| `:enter` | Applied during the entire entering phase. |\n| `:enter-start` | Added before element is inserted, removed one frame after element is inserted. |\n| `:enter-end` | Added one frame after element is inserted (at the same time `enter-start` is removed), removed when transition/animation finishes.\n| `:leave` | Applied during the entire leaving phase. |\n| `:leave-start` | Added immediately when a leaving transition is triggered, removed after one frame. |\n| `:leave-end` | Added one frame after a leaving transition is triggered (at the same time `leave-start` is removed), removed when the transition/animation finishes.\n\n**Example:**\n```html\n<div\n    x-show='open'\n    x-transition:enter='transition ease-out duration-300'\n    x-transition:enter-start='opacity-0 transform scale-90'\n    x-transition:enter-end='opacity-100 transform scale-100'\n    x-transition:leave='transition ease-in duration-300'\n    x-transition:leave-start='opacity-100 transform scale-100'\n    x-transition:leave-end='opacity-0 transform scale-90'\n>...</div>\n```\n\n```html\n<template x-if='open'>\n    <div\n        x-transition:enter='transition ease-out duration-300'\n        x-transition:enter-start='opacity-0 transform scale-90'\n        x-transition:enter-end='opacity-100 transform scale-100'\n        x-transition:leave='transition ease-in duration-300'\n        x-transition:leave-start='opacity-100 transform scale-100'\n        x-transition:leave-end='opacity-0 transform scale-90'\n    >...</div>\n</template>\n```"
      }
    },
    {
      "name": "x-transition:enter-start",
      "description": {
        "kind": "markdown",
        "value": "Alpine offers 6 different transition directives for applying classes to various stages of an element's transition between 'hidden' and 'shown' states. These directives work both with `x-show` AND `x-if`.\n\nThese behave exactly like VueJs's transition directives, except they have different, more sensible names:\n\n| Directive | Description |\n| --- | --- |\n| `:enter` | Applied during the entire entering phase. |\n| `:enter-start` | Added before element is inserted, removed one frame after element is inserted. |\n| `:enter-end` | Added one frame after element is inserted (at the same time `enter-start` is removed), removed when transition/animation finishes.\n| `:leave` | Applied during the entire leaving phase. |\n| `:leave-start` | Added immediately when a leaving transition is triggered, removed after one frame. |\n| `:leave-end` | Added one frame after a leaving transition is triggered (at the same time `leave-start` is removed), removed when the transition/animation finishes.\n\n**Example:**\n```html\n<div\n    x-show='open'\n    x-transition:enter='transition ease-out duration-300'\n    x-transition:enter-start='opacity-0 transform scale-90'\n    x-transition:enter-end='opacity-100 transform scale-100'\n    x-transition:leave='transition ease-in duration-300'\n    x-transition:leave-start='opacity-100 transform scale-100'\n    x-transition:leave-end='opacity-0 transform scale-90'\n>...</div>\n```\n\n```html\n<template x-if='open'>\n    <div\n        x-transition:enter='transition ease-out duration-300'\n        x-transition:enter-start='opacity-0 transform scale-90'\n        x-transition:enter-end='opacity-100 transform scale-100'\n        x-transition:leave='transition ease-in duration-300'\n        x-transition:leave-start='opacity-100 transform scale-100'\n        x-transition:leave-end='opacity-0 transform scale-90'\n    >...</div>\n</template>\n```"
      }
    },
    {
      "name": "x-transition:enter-end",
      "description": {
        "kind": "markdown",
        "value": "Alpine offers 6 different transition directives for applying classes to various stages of an element's transition between 'hidden' and 'shown' states. These directives work both with `x-show` AND `x-if`.\n\nThese behave exactly like VueJs's transition directives, except they have different, more sensible names:\n\n| Directive | Description |\n| --- | --- |\n| `:enter` | Applied during the entire entering phase. |\n| `:enter-start` | Added before element is inserted, removed one frame after element is inserted. |\n| `:enter-end` | Added one frame after element is inserted (at the same time `enter-start` is removed), removed when transition/animation finishes.\n| `:leave` | Applied during the entire leaving phase. |\n| `:leave-start` | Added immediately when a leaving transition is triggered, removed after one frame. |\n| `:leave-end` | Added one frame after a leaving transition is triggered (at the same time `leave-start` is removed), removed when the transition/animation finishes.\n\n**Example:**\n```html\n<div\n    x-show='open'\n    x-transition:enter='transition ease-out duration-300'\n    x-transition:enter-start='opacity-0 transform scale-90'\n    x-transition:enter-end='opacity-100 transform scale-100'\n    x-transition:leave='transition ease-in duration-300'\n    x-transition:leave-start='opacity-100 transform scale-100'\n    x-transition:leave-end='opacity-0 transform scale-90'\n>...</div>\n```\n\n```html\n<template x-if='open'>\n    <div\n        x-transition:enter='transition ease-out duration-300'\n        x-transition:enter-start='opacity-0 transform scale-90'\n        x-transition:enter-end='opacity-100 transform scale-100'\n        x-transition:leave='transition ease-in duration-300'\n        x-transition:leave-start='opacity-100 transform scale-100'\n        x-transition:leave-end='opacity-0 transform scale-90'\n    >...</div>\n</template>\n```"
      }
    },
    {
      "name": "x-transition:leave",
      "description": {
        "kind": "markdown",
        "value": "Alpine offers 6 different transition directives for applying classes to various stages of an element's transition between 'hidden' and 'shown' states. These directives work both with `x-show` AND `x-if`.\n\nThese behave exactly like VueJs's transition directives, except they have different, more sensible names:\n\n| Directive | Description |\n| --- | --- |\n| `:enter` | Applied during the entire entering phase. |\n| `:enter-start` | Added before element is inserted, removed one frame after element is inserted. |\n| `:enter-end` | Added one frame after element is inserted (at the same time `enter-start` is removed), removed when transition/animation finishes.\n| `:leave` | Applied during the entire leaving phase. |\n| `:leave-start` | Added immediately when a leaving transition is triggered, removed after one frame. |\n| `:leave-end` | Added one frame after a leaving transition is triggered (at the same time `leave-start` is removed), removed when the transition/animation finishes.\n\n**Example:**\n```html\n<div\n    x-show='open'\n    x-transition:enter='transition ease-out duration-300'\n    x-transition:enter-start='opacity-0 transform scale-90'\n    x-transition:enter-end='opacity-100 transform scale-100'\n    x-transition:leave='transition ease-in duration-300'\n    x-transition:leave-start='opacity-100 transform scale-100'\n    x-transition:leave-end='opacity-0 transform scale-90'\n>...</div>\n```\n\n```html\n<template x-if='open'>\n    <div\n        x-transition:enter='transition ease-out duration-300'\n        x-transition:enter-start='opacity-0 transform scale-90'\n        x-transition:enter-end='opacity-100 transform scale-100'\n        x-transition:leave='transition ease-in duration-300'\n        x-transition:leave-start='opacity-100 transform scale-100'\n        x-transition:leave-end='opacity-0 transform scale-90'\n    >...</div>\n</template>\n```"
      }
    },
    {
      "name": "x-transition:leave-start",
      "description": {
        "kind": "markdown",
        "value": "Alpine offers 6 different transition directives for applying classes to various stages of an element's transition between 'hidden' and 'shown' states. These directives work both with `x-show` AND `x-if`.\n\nThese behave exactly like VueJs's transition directives, except they have different, more sensible names:\n\n| Directive | Description |\n| --- | --- |\n| `:enter` | Applied during the entire entering phase. |\n| `:enter-start` | Added before element is inserted, removed one frame after element is inserted. |\n| `:enter-end` | Added one frame after element is inserted (at the same time `enter-start` is removed), removed when transition/animation finishes.\n| `:leave` | Applied during the entire leaving phase. |\n| `:leave-start` | Added immediately when a leaving transition is triggered, removed after one frame. |\n| `:leave-end` | Added one frame after a leaving transition is triggered (at the same time `leave-start` is removed), removed when the transition/animation finishes.\n\n**Example:**\n```html\n<div\n    x-show='open'\n    x-transition:enter='transition ease-out duration-300'\n    x-transition:enter-start='opacity-0 transform scale-90'\n    x-transition:enter-end='opacity-100 transform scale-100'\n    x-transition:leave='transition ease-in duration-300'\n    x-transition:leave-start='opacity-100 transform scale-100'\n    x-transition:leave-end='opacity-0 transform scale-90'\n>...</div>\n```\n\n```html\n<template x-if='open'>\n    <div\n        x-transition:enter='transition ease-out duration-300'\n        x-transition:enter-start='opacity-0 transform scale-90'\n        x-transition:enter-end='opacity-100 transform scale-100'\n        x-transition:leave='transition ease-in duration-300'\n        x-transition:leave-start='opacity-100 transform scale-100'\n        x-transition:leave-end='opacity-0 transform scale-90'\n    >...</div>\n</template>\n```"
      }
    },
    {
      "name": "x-transition:leave-end",
      "description": {
        "kind": "markdown",
        "value": "Alpine offers 6 different transition directives for applying classes to various stages of an element's transition between 'hidden' and 'shown' states. These directives work both with `x-show` AND `x-if`.\n\nThese behave exactly like VueJs's transition directives, except they have different, more sensible names:\n\n| Directive | Description |\n| --- | --- |\n| `:enter` | Applied during the entire entering phase. |\n| `:enter-start` | Added before element is inserted, removed one frame after element is inserted. |\n| `:enter-end` | Added one frame after element is inserted (at the same time `enter-start` is removed), removed when transition/animation finishes.\n| `:leave` | Applied during the entire leaving phase. |\n| `:leave-start` | Added immediately when a leaving transition is triggered, removed after one frame. |\n| `:leave-end` | Added one frame after a leaving transition is triggered (at the same time `leave-start` is removed), removed when the transition/animation finishes.\n\n**Example:**\n```html\n<div\n    x-show='open'\n    x-transition:enter='transition ease-out duration-300'\n    x-transition:enter-start='opacity-0 transform scale-90'\n    x-transition:enter-end='opacity-100 transform scale-100'\n    x-transition:leave='transition ease-in duration-300'\n    x-transition:leave-start='opacity-100 transform scale-100'\n    x-transition:leave-end='opacity-0 transform scale-90'\n>...</div>\n```\n\n```html\n<template x-if='open'>\n    <div\n        x-transition:enter='transition ease-out duration-300'\n        x-transition:enter-start='opacity-0 transform scale-90'\n        x-transition:enter-end='opacity-100 transform scale-100'\n        x-transition:leave='transition ease-in duration-300'\n        x-transition:leave-start='opacity-100 transform scale-100'\n        x-transition:leave-end='opacity-0 transform scale-90'\n    >...</div>\n</template>\n```"
      }
    },
    {
      "name": "x-cloak",
      "description": {
        "kind": "markdown",
        "value": "**Example:** `<div x-data='{}' x-cloak></div>`\n\n`x-cloak` attributes are removed from elements when Alpine initializes. This is useful for hiding pre-initialized DOM. It's typical to add the following global style for this to work:\n\n```html\n<style>\n    [x-cloak] { display: none; }\n</style>\n```"
      }
    },
    {
      "name": "@abort",
      "description": {
        "kind": "markdown",
        "value": "The loading of a resource has been aborted.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@blur",
      "description": {
        "kind": "markdown",
        "value": "An element has lost focus (does not bubble).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@canplay",
      "description": {
        "kind": "markdown",
        "value": "The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@canplaythrough",
      "description": {
        "kind": "markdown",
        "value": "The user agent can play the media up to its end without having to stop for further buffering of content.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@change",
      "description": {
        "kind": "markdown",
        "value": "The change event is fired for <input>, <select>, and <textarea> elements when a change to the element's value is committed by the user.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@click",
      "description": {
        "kind": "markdown",
        "value": "A pointing device button has been pressed and released on an element.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@contextmenu",
      "description": {
        "kind": "markdown",
        "value": "The right button of the mouse is clicked (before the context menu is displayed).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@dblclick",
      "description": {
        "kind": "markdown",
        "value": "A pointing device button is clicked twice on an element.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@drag",
      "description": {
        "kind": "markdown",
        "value": "An element or text selection is being dragged (every 350ms).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@dragend",
      "description": {
        "kind": "markdown",
        "value": "A drag operation is being ended (by releasing a mouse button or hitting the escape key).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@dragenter",
      "description": {
        "kind": "markdown",
        "value": "A dragged element or text selection enters a valid drop target.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@dragleave",
      "description": {
        "kind": "markdown",
        "value": "A dragged element or text selection leaves a valid drop target.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@dragover",
      "description": {
        "kind": "markdown",
        "value": "An element or text selection is being dragged over a valid drop target (every 350ms).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@dragstart",
      "description": {
        "kind": "markdown",
        "value": "The user starts dragging an element or text selection.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@drop",
      "description": {
        "kind": "markdown",
        "value": "An element is dropped on a valid drop target.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@durationchange",
      "description": {
        "kind": "markdown",
        "value": "The duration attribute has been updated.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@emptied",
      "description": {
        "kind": "markdown",
        "value": "The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@ended",
      "description": {
        "kind": "markdown",
        "value": "Playback has stopped because the end of the media was reached.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@error",
      "description": {
        "kind": "markdown",
        "value": "A resource failed to load.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@focus",
      "description": {
        "kind": "markdown",
        "value": "An element has received focus (does not bubble).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@input",
      "description": {
        "kind": "markdown",
        "value": "The value of an element changes or the content of an element with the attribute contenteditable is modified.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@invalid",
      "description": {
        "kind": "markdown",
        "value": "A submittable element has been checked and doesn't satisfy its constraints.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@keydown",
      "description": {
        "kind": "markdown",
        "value": "A key is pressed down.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@keypress",
      "description": {
        "kind": "markdown",
        "value": "A key is pressed down and that key normally produces a character value (use input instead).\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@keyup",
      "description": {
        "kind": "markdown",
        "value": "A key is released.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@load",
      "description": {
        "kind": "markdown",
        "value": "A resource and its dependent resources have finished loading.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@loadeddata",
      "description": {
        "kind": "markdown",
        "value": "The first frame of the media has finished loading.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@loadedmetadata",
      "description": {
        "kind": "markdown",
        "value": "The metadata has been loaded.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@loadstart",
      "description": {
        "kind": "markdown",
        "value": "Progress has begun.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@mousedown",
      "description": {
        "kind": "markdown",
        "value": "A pointing device button (usually a mouse) is pressed on an element.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@mousemove",
      "description": {
        "kind": "markdown",
        "value": "A pointing device is moved over an element.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@mouseout",
      "description": {
        "kind": "markdown",
        "value": "A pointing device is moved off the element that has the listener attached or off one of its children.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@mouseover",
      "description": {
        "kind": "markdown",
        "value": "A pointing device is moved onto the element that has the listener attached or onto one of its children.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@mouseup",
      "description": {
        "kind": "markdown",
        "value": "A pointing device button is released over an element.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@pause",
      "description": {
        "kind": "markdown",
        "value": "Playback has been paused.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@play",
      "description": {
        "kind": "markdown",
        "value": "Playback has begun.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@playing",
      "description": {
        "kind": "markdown",
        "value": "Playback is ready to start after having been paused or delayed due to lack of data.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@progress",
      "description": {
        "kind": "markdown",
        "value": "In progress.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@ratechange",
      "description": {
        "kind": "markdown",
        "value": "The playback rate has changed.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@reset",
      "description": {
        "kind": "markdown",
        "value": "A form is reset.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@resize",
      "description": {
        "kind": "markdown",
        "value": "The document view has been resized.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@readystatechange",
      "description": {
        "kind": "markdown",
        "value": "The readyState attribute of a document has changed.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@scroll",
      "description": {
        "kind": "markdown",
        "value": "The document view or an element has been scrolled.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@seeked",
      "description": {
        "kind": "markdown",
        "value": "A seek operation completed.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@seeking",
      "description": {
        "kind": "markdown",
        "value": "A seek operation began.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@select",
      "description": {
        "kind": "markdown",
        "value": "Some text is being selected.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@show",
      "description": {
        "kind": "markdown",
        "value": "A contextmenu event was fired on/bubbled to an element that has a contextmenu attribute\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@stalled",
      "description": {
        "kind": "markdown",
        "value": "The user agent is trying to fetch media data, but data is unexpectedly not forthcoming.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@submit",
      "description": {
        "kind": "markdown",
        "value": "A form is submitted.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@suspend",
      "description": {
        "kind": "markdown",
        "value": "Media data loading has been suspended.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@timeupdate",
      "description": {
        "kind": "markdown",
        "value": "The time indicated by the currentTime attribute has been updated.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@volumechange",
      "description": {
        "kind": "markdown",
        "value": "The volume has changed.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "@waiting",
      "description": {
        "kind": "markdown",
        "value": "Playback has stopped because of a temporary lack of data.\n\n---\n\n`@` attaches an event listener to the element it's declared on. When that event is emitted, the JavaScript expression set as its value is executed.\n\nIf any data is modified in the expression, other element attributes 'bound' to this data, will be updated.\n\n**Example:** `<button @click='foo = 'bar''></button>`\n\n**Structure:** `<button @[event]='[expression]'></button>`\n\n> Note: You are free to use the shorter '@' syntax: `@click='...'`"
      }
    },
    {
      "name": "x-bind:class",
      "description": {
        "kind": "markdown",
        "value": "A space-separated list of the classes of the element. Classes allows CSS and JavaScript to select and access specific elements via the [class selectors](/en-US/docs/Web/CSS/Class_selectors) or functions like the method [`Document.getElementsByClassName()`](/en-US/docs/Web/API/Document/getElementsByClassName 'returns an array-like object of all child elements which have all of the given class names.').\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "x-bind:disabled",
      "description": {
        "kind": "markdown",
        "value": "This Boolean attribute indicates that the user cannot interact with the control.\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "x-bind:readonly",
      "description": {
        "kind": "markdown",
        "value": "This Boolean attribute indicates that the user cannot modify the value of the control.\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "x-bind:required",
      "description": {
        "kind": "markdown",
        "value": "This attribute specifies that the user must fill in a value before submitting a form.\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "x-bind:checked",
      "description": {
        "kind": "markdown",
        "value": "Indicates the current 'checked' state of checkboxes, radio buttons, and other widgets.\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "x-bind:hidden",
      "description": {
        "kind": "markdown",
        "value": "A Boolean attribute indicates that the element is not yet, or is no longer, _relevant_. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    },
    {
      "name": "x-bind:selected",
      "description": {
        "kind": "markdown",
        "value": "If present, this Boolean attribute indicates that the option is initially selected. If the `<option>` element is the descendant of a [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select 'The HTML <select> element represents a control that provides a menu of options') element whose [`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple) attribute is not set, only one single `<option>` of this [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select 'The HTML <select> element represents a control that provides a menu of options') element may have the `selected` attribute.\n\n---\n\n`x-bind` sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component's data object, and will update every-time its data is updated.\n\n> Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.\n\n**Example:** `<input x-bind:type='inputType'>`\n\n**Structure:** `<input x-bind:[attribute]='[expression]'>`\n\n> Note: You are free to use the shorter ':' syntax: `:type='...'`\n\n**`x-bind` for class attributes**\n\n`x-bind` behaves a little differently when binding to the `class` attribute.\n\nFor classes, you pass in an object who's keys are class names, and values are boolean expressions to determine if those class names are applied or not.\n\nFor example:\n`<div x-bind:class='{ 'hidden': foo }'></div>`\n\nIn this example, the 'hidden' class will only be applied when the value of the `foo` data attribute is `true`.\n\n**`x-bind` for boolean attributes**\n\n`x-bind` supports boolean attributes in the same way that value attributes, using a variable as the condition or any JavaScript expression that resolves to `true` or `false`.\n\nFor example:\n`<button x-bind:disabled='myVar'>Click me</button>`\n\nThis will add or remove the `disabled` attribute when `myVar` is true or false respectively.\n\nMost common boolean attributes are supported, like `readonly`, `required`, etc."
      }
    }
  ]
}
